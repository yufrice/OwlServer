-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/OwlServer#readme</a>
@package OwlServer
@version 0.1.0.0

module Config

-- | General configs.
data AppConfig
AppConfig :: ConnectionPool -> FilePath -> AppConfig
[getPool] :: AppConfig -> ConnectionPool
[staticDir] :: AppConfig -> FilePath

-- | Database Configs.
type Config = Record '["listenPort" >: Port, "staticDir" >: FilePath, "database" >: DbConfig]

-- | Config file path.
type DbConfig = Record '["name" >: Database, "host" >: HostName, "user" >: Text, "pass" >: Text, "poolSize" >: Int]
defaultConfigPath :: FilePath

-- | Wrap Handler in ReadMonad.
--   
--   Context Settings.
type Owl = ReaderT AppConfig Handler

module Lib.Auth
newtype Authorization
Authorization :: Text -> Authorization
[getToken] :: Authorization -> Text
errorResponseHeader :: Header
instance GHC.Generics.Generic Lib.Auth.Authorization
instance GHC.Classes.Ord Lib.Auth.Authorization
instance GHC.Classes.Eq Lib.Auth.Authorization
instance GHC.Show.Show Lib.Auth.Authorization
instance GHC.Read.Read Lib.Auth.Authorization
instance Web.Internal.HttpApiData.FromHttpApiData Lib.Auth.Authorization

module Lib.VectorSim
similarity :: Num a => Vector a -> Vector a -> a

-- | Calc Lp2 norm. O(n) O(n)
--   
--   <pre>
--   &gt;&gt;&gt; l2Norm [1,2,3]
--   sqrt 14
--   </pre>
l2Norm :: (Num a, Floating a) => Vector a -> a

-- | Calc dot product. O(n) O(min(mn,n))
--   
--   <pre>
--   &gt;&gt;&gt; dotProduct [1,2,3] [3,2,1]
--   10
--   </pre>
dotProduct :: (Num a) => Vector a -> Vector a -> a

module Models.Post

-- | Post file form.
data FileInput
FileInput :: Text -> Text -> Text -> ByteString -> Text -> FileInput
[_name] :: FileInput -> Text
[_word] :: FileInput -> Text
[_format] :: FileInput -> Text
[_file] :: FileInput -> ByteString
[_desc] :: FileInput -> Text
word :: Lens' FileInput Text
name :: Lens' FileInput Text
format :: Lens' FileInput Text
file :: Lens' FileInput ByteString
desc :: Lens' FileInput Text
instance Data.Aeson.Types.FromJSON.FromJSON Data.ByteString.Lazy.Internal.ByteString
instance Data.Aeson.Types.FromJSON.FromJSON Models.Post.FileInput
instance GHC.Show.Show Models.Post.FileInput
instance GHC.Generics.Generic Models.Post.FileInput

module Models.Result

-- | Item search result.
--   
--   Add item response code.
newtype SearchResult
SearchResult :: [ResultWord] -> SearchResult
[result] :: SearchResult -> [ResultWord]

-- | Vector search result. tuple(Word, Similarity)
data ItemPostResult
type LoginResult = Headers '[Header "access_token" Text, Header "token_type" ByteString, Header "expires_in" Int, Header "refresh_token" ByteString]
data ResultWord
ResultWord :: Text -> Double -> ResultWord
[word] :: ResultWord -> Text
[sim] :: ResultWord -> Double
instance GHC.Show.Show Models.Result.SearchResult
instance GHC.Generics.Generic Models.Result.SearchResult
instance GHC.Show.Show Models.Result.ResultWord
instance GHC.Generics.Generic Models.Result.ResultWord
instance GHC.Show.Show Models.Result.ItemPostResult
instance GHC.Generics.Generic Models.Result.ItemPostResult
instance Data.Aeson.Types.ToJSON.ToJSON Models.Result.SearchResult
instance Data.Aeson.Types.ToJSON.ToJSON Models.Result.ResultWord
instance Data.Aeson.Types.ToJSON.ToJSON Models.Result.ItemPostResult
instance Web.Internal.HttpApiData.ToHttpApiData Data.ByteString.Internal.ByteString

module Models.Vec
type Vec = Vector Double

module Utils

-- | Connecting Database Utility.
runDB :: (MonadReader AppConfig m, MonadIO m) => MongoPersistM a -> m a

module Model
unUserKey :: Key User -> (BackendKey MongoContext)
unSessionKey :: Key Session -> (BackendKey MongoContext)
unItemKey :: Key Item -> (BackendKey MongoContext)
unVectorKey :: Key Vector -> (BackendKey MongoContext)
type VectorId = Key Vector
data Vector
Vector :: !Text -> !Vec -> Vector
[_vectorWord] :: Vector -> !Text
[_vectorVector] :: Vector -> !Vec
type ItemId = Key Item
data Item
Item :: !Text -> !Text -> !Text -> !Text -> Item
[_itemName] :: Item -> !Text
[_itemWord] :: Item -> !Text
[_itemImage] :: Item -> !Text
[_itemDesc] :: Item -> !Text
type SessionId = Key Session
data Session
Session :: !Text -> !UTCTime -> Session
[_sessionToken] :: Session -> !Text
[_sessionCreatedAt] :: Session -> !UTCTime
type UserId = Key User
data User
User :: !Text -> !ByteString -> User
[_userIdent] :: User -> !Text
[_userPassword] :: User -> !ByteString
userIdent :: forall f. Functor f => (Text -> f Text) -> User -> f User
userPassword :: forall f. Functor f => (ByteString -> f ByteString) -> User -> f User
sessionToken :: forall f. Functor f => (Text -> f Text) -> Session -> f Session
sessionCreatedAt :: forall f. Functor f => (UTCTime -> f UTCTime) -> Session -> f Session
itemName :: forall f. Functor f => (Text -> f Text) -> Item -> f Item
itemWord :: forall f. Functor f => (Text -> f Text) -> Item -> f Item
itemImage :: forall f. Functor f => (Text -> f Text) -> Item -> f Item
itemDesc :: forall f. Functor f => (Text -> f Text) -> Item -> f Item
vectorWord :: forall f. Functor f => (Text -> f Text) -> Vector -> f Vector
vectorVector :: forall f. Functor f => (Vec -> f Vec) -> Vector -> f Vector
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.User)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.User)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.User)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.User)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.Session)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.Session)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.Session)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.Session)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.Session)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.Item)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.Item)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.Item)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.Item)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.Item)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.Vector)
instance Database.Persist.Class.PersistField.PersistField Model.Vector
instance Database.Persist.Sql.Class.PersistFieldSql Model.Vector
instance Database.Persist.Class.PersistEntity.PersistEntity Model.Vector
instance Database.Persist.Class.PersistStore.ToBackendKey Database.MongoDB.Query.MongoContext Model.Vector
instance Data.Aeson.Types.ToJSON.ToJSON Model.Vector
instance Data.Aeson.Types.FromJSON.FromJSON Model.Vector
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Entity Model.Vector)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Entity Model.Vector)
instance Database.Persist.Class.PersistField.PersistField Model.Item
instance Database.Persist.Sql.Class.PersistFieldSql Model.Item
instance Database.Persist.Class.PersistEntity.PersistEntity Model.Item
instance Database.Persist.Class.PersistStore.ToBackendKey Database.MongoDB.Query.MongoContext Model.Item
instance Data.Aeson.Types.ToJSON.ToJSON Model.Item
instance Data.Aeson.Types.FromJSON.FromJSON Model.Item
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Entity Model.Item)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Entity Model.Item)
instance Database.Persist.Class.PersistField.PersistField Model.Session
instance Database.Persist.Sql.Class.PersistFieldSql Model.Session
instance Database.Persist.Class.PersistEntity.PersistEntity Model.Session
instance Database.Persist.Class.PersistStore.ToBackendKey Database.MongoDB.Query.MongoContext Model.Session
instance Database.Persist.Class.PersistField.PersistField Model.User
instance Database.Persist.Sql.Class.PersistFieldSql Model.User
instance Database.Persist.Class.PersistEntity.PersistEntity Model.User
instance Database.Persist.Class.PersistStore.ToBackendKey Database.MongoDB.Query.MongoContext Model.User
instance Data.Aeson.Types.ToJSON.ToJSON Model.User
instance Data.Aeson.Types.FromJSON.FromJSON Model.User
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Entity Model.User)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Entity Model.User)
instance Data.Aeson.Types.ToJSON.ToJSON Data.ByteString.Internal.ByteString
instance Data.Aeson.Types.FromJSON.FromJSON Data.ByteString.Internal.ByteString

module Api

-- | API endpoints.
type API = ItemApi :<|> VectorApi

-- | Public endpoints.
type APP = "api" :> API :<|> Public
api :: Proxy APP

-- | Get Search Word Vector.
type ItemApi = "item" :> QueryParams "search" Text :> Get '[JSON] [Entity Item] :<|> "item" :> Header "Authorization" Authorization :> ReqBody '[JSON] FileInput :> Post '[JSON] ()

-- | Get Search Items. Post Add Item.
type Public = "api" :> LoginApi :<|> Raw

-- | Post Login response access token.
type VectorApi = "vector" :> QueryParam "word" Text :> Get '[JSON] SearchResult

module Handler.Login
login :: User -> Owl (LoginResult NoContent)

module Handler.GetVector
getVector :: Maybe Text -> Owl SearchResult

module Handler.GetItem
getItem :: [Text] -> Owl [Entity Item]

module Handler.AddItem
postAddItem :: Maybe Authorization -> FileInput -> Owl ()

module Server
app :: AppConfig -> Application
